# vim:fileencoding=utf-8:foldmethod=marker
alias xf="xfce4-terminal"

#{{{ >>>   ANSI CODE   ##################################################################
alias oo="clear && read -p ' pane >>>  ' abc && clear && read -p 'command >>>   ' bce && tmux send-keys -t$abc $bce  Enter"
Black='\033[0;30m'
Red='\033[0;31m'
Green='\033[0;32m'
Blue='\033[0;34m'
Purple='\033[0;35m'
Cyan='\033[0;36m'
Yellow='\033[1;33m'
White='\033[1;37m'
#   ANSI CODE BACKGROUND  ##################################################################
BBlue='\e[0;104m'
BBlack='\e[0;100m'
RRed='\e[0;100m'
GGreen='\e[0;100m'
YYellow='\e[0;100m'
BBlue='\e[0;100m'
PPurple='\e[0;100m'
CCyan='\e[0;100m'
WWhite='\e[0;100m'
NC='\033[0m'
#}}}
#{{{ >>>   tmux
alias 1='tmux new-session \; split-window -h \; split-window -v -p 66 \; split-window -v\; attach\;'
alias 2='tmux new-session \; split-window -v \; split-window -h -p 66 \; split-window -h\; selectp -t1\; attach\;'
alias tk='tmux kill-session'
alias wo='terminator --geometry="1200x800+0+0 -b -e "tmux new-session 'vim' -c ':VimwikiIndex' \; split-window -h 'nvim' -c ':Calendar-view=days' \; split-window -v -p 20 'bwm-ng' \; attach\;"'
alias woo='tmux new-session 'vim' -c ':VimwikiIndex' \;split-window -v -p 30 'bpytop';\ split-window -h 'vit' \; split-window -v -p 20 'bwm-ng' \; attach\;'
alias 122='tmux new-session \; split-window -v \; split-window -h -p 33 \; selectp -t1\; attach \;'
alias tod='tmux new-session 'vim' -c ':Calendar=view-day' \; split-window -h 'nvim' -c ':TW' \; split-window -h -p 20 \; selectp -t 1\;'
alias sound='tmux new-session 'castero' \; split-window -v 'cmus' \; split-window -h -p 30 \; selectp -t 1\; attach \;'
#}}}
#{{{ >>>   ddgr
alias dg='ddgr -w github.com -n 10'
alias dy='ddgr -w youtube.com -n 10'
alias dr='ddgr -w reddit.com -n10'
alias ds='ddgr -w plato.stanford.edu'
alias dp='ddgr -w pypi.org'
alias uu="xterm -geom 120x75+0+0 -e bash -c 'ddgr'"
alias gg="xterm -geom 120x75+0+0 -e bash -c 'googler'"
#}}}
#{{{ >>>   yt-dlp
alias yt3="yt-dlp --config-locations /home/batan/.config/yt-dlp/yt-dlp.mp3.conf"
alias yt4="yt-dlp --config-locations /home/batan/.config/yt-dlp/yt-dlp.mp4.conf"
#}}}
#{{{ >>>   megatools
alias mg='megaget'
alias mp='megaput'
alias ml='megals'
alias mr='megarm'
alias mcc='megacopy'
alias mmkd='megamkdir'
#}}}
#{{{ >>>   taskwarrior
alias ta='task add'
alias tl='task list'
alias td='task done'
alias tb='task burndown'
alias tdd='task delete'
alias tbd='task burndown.daily'
alias tll='task list project:'
alias by='task add +buy proj:buy'
alias taaa='task add due:$(date -d "2024-12-15 +2 days" +%Y-%m-%dT23:30:00)'
alias taa='task add due:$(date +%Y-%m-%d)T23:30:00 proj:$(date +%j)'
#}}}
#{{{ >>>   buku
alias ba='buku -a'
alias bs='buku -s'
alias bd='buku -d'
alias bb='buku -a $(xclip -o)'
#}}}
#{{{ >>>   Common
alias sbb='sudo -u batan bash'
alias mn='sudo -u batan bash /home/batan/10/menu/scripts/mn.sh'
alias sb='sudo -u batan bash'
alias rf='rofi -show drun'
alias update='sudo apt update && sudo apt upgrade -y'
alias clean='sudo -u batan bash /home/batan/check/clean.sh'
alias nuke='sudo -u batan bash /home/batan/check/nuke.sh'
alias dia='sudo bash /home/batan/10/postinstall/dia.sh'
alias mov='mv *.mp3 /home/batan/Music & mv *.mp4 /home/batan/Videos/ & mv *.sh /home/batan/Sh & mv *.wiki /home/batan/Wiki & mv *.jpg /home/batan/Pictures'
alias e='exit'
alias dhtml='echo "file:///home/batan/10/html/homepage/d.html"| xclip -selection clipboard'
alias install='sudo apt install'
alias nala="sudo nala"
#}}}
#{{{ >>>   modify existing files
alias xx='sudo chmod -x'
alias x="xclip -selec clip"
alias alia='vim .bashrc.aliases'
alias ali='vim .bashrc'
#}}}
#{{{ >>>   browser
alias un='/usr/bin/flatpak run --branch=stable --arch=x86_64 --command=/app/bin/chromium --file-forwarding io.github.ungoogled_software.ungoogled_chromium --js-flags='jitless' @@u %U @@'
alias fk='falkon'
#}}}
#{{{ >>>   functions
#===================================================================================
#{{{ >>>   Draw a Border around Outcome
border(){
	read -p"> " COMM
$COMM | awk '{
    # Store the incoming line in the buffer
    lines[NR % 5] = $0;

    # Track the longest line seen so far
    if (length($0) > global_max_len) {
        global_max_len = length($0);
    }

    # Only process when we have at least 5 lines and the line number is even
    if (NR >= 5 && NR % 2 == 0) {
        # Create top and bottom borders with the global max width
        top_border = "╔";
        for (i = 1; i <= global_max_len + 2; i++) top_border = top_border "═";
        top_border = top_border "╗";

        bottom_border = "╚";
        for (i = 1; i <= global_max_len + 2; i++) bottom_border = bottom_border "═";
        bottom_border = bottom_border "╝";

        # Use tput to move the cursor to row 10 and column 0 before printing
        system("tput cup 10 0");

        # Print the top border
        print top_border;

        # Print the 5 most recent lines, wrapped in the border
        for (i = 0; i < 5; i++) {
            printf("║ %-*s ║\n", global_max_len, lines[(NR - 5 + i) % 5]);
        }

        # Print the bottom border
        print bottom_border;

        # Sleep for 0.2 seconds to slow down the updates
        system("sleep 0.2");
    }
}'
}
#}}}
#{{{ >>>   check xx[0-9] variable

checkxx(){
cc1=$(cat .bashrc|grep "xx[0-9]"|wc -l)
cc2=$(cat .bashrc.aliases|grep "xx[0-9]"|wc -l)
cc3=$(cat .bashrc.navigation|grep "xx[0-9]"|wc -l)
cc4=$(( $cc1 + $cc2 + $cc3 ))
echo "The variable xx[0-9] is $cc4 present in your bashrc"
}
alias checkxx='checkxx'

#}}}
 #{{{ >>>   Countdown function

countd(){
clear
tput civis
echo -e "Time Now              : $(date +%H:%M)"
echo -e "Time to Countdown too : "
tput cup 1 24
read -n2 dd
tput cup 1 24
echo -e "$dd:"
tput cup 1 27
read -n2 ee
tput cup 5 0
read -p "Command to execute:   >>>   " xxx


bb=$(date -d ${dd}:${ee} +%s)
aa=$(date +%s)
ff=$(( $bb - $aa ))
echo -e "\033[37m"
for i in $(seq -f "%06g" $ff -1 0);do tput cup 10 20 && echo $i && sleep 1;done
echo -e "\033[0m"
clear
echo -e "\033[33mExecuting \033[31m${xxx}\033[0m"
$xxx
}
#}}}
#{{{ >>>   Reminder
reminder(){
if [[ ! -d /home/batan/.config/reminder ]]; then
        mkdir -p /home/batan/.config/reminder
fi
vim /home/batan/.config/reminder/$(date +%j).rem
}
#}}}
#{{{ >>>   Download Video incl Quality
d4(){
	clear
	counter="1"
	while :;
	do
	read -p "URL $counter:   >>>   " abc
	if [[ -z $abc ]];
	then
		break
	fi
	: $((counter++))
	input="$input $abc"
done
clear
for URL in ${input[@]};
do
	clear
	echo -e "Downloading $counter videos"
	echo -e "\033[32m===========================\033[0m"
	/home/batan/.local/bin/yt-dlp --restrict-filenames --force-download-archive \
		--download-archive /media/batan/100/Videos/archive.txt \
		--restrict-filenames $URL
			: $((counter--))
		done
		clear
		echo -e "To remove whitespace in following videos and move to dir Videos enter [[ ANY ]]"
		echo -e "\033[32m===============================================================================\033[0m"
		ls *mp4
		echo -e "\033[32m===============================================================================\033[0m"
		read n1 xxx
		rename 's/ /_/g' *mp4
		mv *mp4 /home/batan/Videos
		}
#}}}
#{{{ >>>   Download Video incl Quality
d4q(){
	clear
	counter="1"
	while :;
	do
	read -p "URL $counter:   >>>   " abc
	if [[ -z $abc ]];
	then
		break
	fi
	: $((counter++))
	input="$input $abc"
done
clear
for URL in ${input[@]};
do
	clear
	echo -e "Downloading $counter videos"
	echo -e "\033[32m===========================\033[0m"
	/home/batan/.local/bin/yt-dlp --restrict-filenames --force-download-archive \
		--download-archive /media/batan/100/Videos/archive.txt \
		--restrict-filenames $URL
			: $((counter--))
		done
		clear
		echo -e "To remove whitespace in following videos and move to dir Videos enter [[ ANY ]]"
		echo -e "\033[32m===============================================================================\033[0m"
		ls *mp4
		echo -e "\033[32m===============================================================================\033[0m"
		read -n1 xxx
		rename 's/ /_/g' *mp4
		mv *mp4 /home/batan/Videos
		}
#}}}
#{{{ >>>   Bookmark URL to Note
bookmark(){
	echo $1 $2 >> /home/batan/.config/lists/bookmarks.md
}
alias bm='bookmark'
#}}}
#{{{ >>>   find
ffind(){
find /media/batan/100 /media/batan/200/batan /media/batan/300/home/batan /media/batan/400/home/batan /media/batan/500/home/batan -maxdepth 4 -type f -name "*$1*" |head -n$2
}

#}}}
#{{{ >>>   download

# Function to read URLs
read_urls() {
    while :; do
        clear
        echo -e "\033[34mPlease enter your \033[33m$counter.\033[34m URL\033[0m"
        read -p 'url  >>>   ' url
        if [[ -z $url ]]; then
            break
        fi
        echo $url >> $LIST
	urls+=("$url")
        ((counter++))
    done
}

# Function to select quality for each URL
select_qualities() {
    for i in "${!urls[@]}"; do
        options=$(/home/batan/.local/bin/yt-dlp -F "${urls[i]}" | awk '{print $1}' | grep '[0-9]p')
        echo -e "\033[34mSelect quality for URL $((i+1))\033[0m"
        select quality in $options; do
            qualities+=("$quality")
            break
        done
    done
}
#}}}
#{{{ >>>   Download Videos
# Function to download videos
download_videos() {
    for i in "${!urls[@]}"; do
        clear
        echo -e "Downloading your $((i+1)). URL"
        echo -e "=============================="
#        /home/batan/.local/bin/yt-dlp --restrict-filenames -f "${qualities[i]}" "${urls[i]}"
        /home/batan/.local/bin/yt-dlp --restrict-filenames "${urls[i]}"
    done


}

lc-down(){
	read_urls
	download_videos
}

#}}}
#{{{ >>>   Bleach
	
bls() {
		SYSTEM="cache clipboard custom desktop_entry localizations memory recent_documents rotated_logs tmp trash"
		for x in ${SYSTEM[@]}; do sudo bleachbit -c system.$x ;done
		}

blf () {
		FIREFOX="backup cache cookies crash_reports dom forms passwords session_restore site_preferences url_history vacuum"
		for i in ${FIREFOX[@]}; do sudo bleachbit -c firefox.$i ;done
		}
		
bla() {
		APT="autoclean autoremove clean package_lists"
		for i in ${[@]}; do sudo bleachbit -c .$i ;done
		}

bld() {
		DEEPSCAN="backup ds_store thumbs_db tmp"
		for i in ${[@]}; do sudo bleachbit -c .$i ;done
		}

lca(){
		sudo apt autoremove --purge -y
		sudo apt autoclean
		sudo apt clean
		sudo dpkg --configure -a
	}

lcu() {
		sudo apt update
		sudo apt upgrade -y
	}

lcsys() {
		lcvar=$(echo -e "bleach-system\nbleach-firefox\nbleach-apt\nbleach-deepscan\nclear-apt\nupdate-apt"|fzf -m --reverse --margin 0 --padding 0 --height 10)
		if [[ $lcvar == bleach-system ]]; then
			bls
			
		elif [[ $lcvar == bleach-firefox ]]; then
			blf
			
		elif [[ $lcvar == bleach-apt ]]; then
			bla
			
		elif [[ $lcvar == bleach-deepscan ]]; then
			bld
		elif [[ $lcvar == clear-apt ]]; then
			lca
			
		elif [[ $lcvar == update-apt ]]; then
			lcu
		fi
		
	}

#}}}
#{{{ >>>   LC-CLIPBOARD
reg0() {
cat /home/batan/.config/lc-clipboard/register0
echo -e ' Copy?'
yesno
if [[ $YESNO == 0 ]];
then
cat .config/lc-clipboard/register0|xclip -selection clipboard
echo -e '\033[44m\033[37mYES\033[0m'
else
echo -e '\033[44m\033[37mNO\033[0m'
fi
}

reg1() {
cat /home/batan/.config/lc-clipboard/register1
echo -e ' Copy?'
yesno
if [[ $YESNO == 0 ]];
then
cat .config/lc-clipboard/register1|xclip -selection clipboard
echo -e '\033[44m\033[37mYES\033[0m'
else
echo -e '\033[44m\033[37mNO\033[0m'
fi

}

reg2() {
cat /home/batan/.config/lc-clipboard/register2
echo -e ' Copy?'
yesno
if [[ $YESNO == 0 ]];
then
cat .config/lc-clipboard/register1|xclip -selection clipboard
echo -e '\033[44m\033[37mYES\033[0m'
else
echo -e '\033[44m\033[37mNO\033[0m'
fi
}


reg3() {
cat /home/batan/.config/lc-clipboard/register3
echo -e ' Copy?'
yesno
if [[ $YESNO == 0 ]];
then
cat .config/lc-clipboard/register3|xclip -selection clipboard
echo -e '\033[44m\033[37mYES\033[0m'
else
echo -e '\033[44m\033[37mNO\033[0m'
fi
}

reg4() {
cat /home/batan/.config/lc-clipboard/register4
echo -e ' Copy?'
yesno
if [[ $YESNO == 0 ]];
then
cat .config/lc-clipboard/register4|xclip -selection clipboard
echo -e '\033[44m\033[37mYES\033[0m'
else
echo -e '\033[44m\033[37mNO\033[0m'
fi
}
reg5() {
cat /home/batan/.config/lc-clipboard/register5
echo -e ' Copy?'
yesno
if [[ $YESNO == 0 ]];
then
cat .config/lc-clipboard/register5|xclip -selection clipboard
echo -e '\033[44m\033[37mYES\033[0m'
else
echo -e '\033[44m\033[37mNO\033[0m'
fi
}

reg6() {
cat /home/batan/.config/lc-clipboard/register6
echo -e ' Copy?'
yesno
if [[ $YESNO == 0 ]];
then
cat .config/lc-clipboard/register6|xclip -selection clipboard
echo -e '\033[44m\033[37mYES\033[0m'
else
echo -e '\033[44m\033[37mNO\033[0m'
fi
}

reg7() {
cat /home/batan/.config/lc-clipboard/register7
echo -e ' Copy?'
yesno
if [[ $YESNO == 0 ]];
then
cat .config/lc-clipboard/register7|xclip -selection clipboard
echo -e '\033[44m\033[37mYES\033[0m'
else
echo -e '\033[44m\033[37mNO\033[0m'
fi
}

#}}}
#{{{ >>>   lc-cd
lc(){
	local dest_dir=$(cat /home/batan/.lc-cd| fzf )
	if [[ $dest_dir != '' ]]; then
		cd "$dest_dir"
	clear
		echo -e "\033[32m=======================================\033[0m"
		ls
		echo -e "\033[32m=======================================\033[0m"
	fi
}
#}}}
#{{{ >>>   export FZF
export FZF_DEFAULT_OPTS="  --color=fg:#9FB1BC,fg+:#9FB1BC,bg:#2E5266,bg+:#2E5266\
  --color=hl:#1a7ada,hl+:#9ae6ff,info:#9fb1bc,marker:#3ee421 \
  --color=prompt:#1700af,spinner:#F4FFFD,pointer:#F4FFFD,header:#F4FFFD \
  --color=border:#F7B32B,preview-fg:#9fb1bc,preview-bg:#2e5266 \
  --color=preview-label:#00857a,label:#f7b32b,query:#d9d9d9 \
  --border='sharp' --preview-window=right,50%,'wrap' \
  --padding='2' --margin='4' --prompt='' --marker='->' \
  --pointer='>>' --separator='─' --scrollbar='│' --info='inline'"
#}}}
#{{{ >>>   lc-history


lc-hist-info() {
echo -e "Usage: lc-history [Options] $1 [input1] $2 [input2]"
echo -e ""
echo -e "    You are seeing this massage because the $1 $2 were not set."
echo -e "    Please repeate the command wih respective subsequent input,"
echo -e "    Whereby $1 is a part-string to search for and $2 represents"
echo -e "    Number of lines to output"
echo -e ""
echo -e "    Options:"
echo -e "      -x        This is a placeholder for now This is a placeholder for now"
echo -e "      -x        This is a placeholder for now This is a placeholder for now"
echo -e "                Input1 and input2 refer to $1 $2 and must be set, else is "
echo -e "                the reason you are seeing this massage."
echo -e "      -x        This is a placeholder for now"
}

lc-hist(){

if [[ -z $1 || $2 == '' ]];
then
	 lc-hist >/dev/null 2>&1 &&
	lc-hist-info
	fi
cat /home/batan/.config/lists/commands.txt|cut -c7-250|grep $1|tail -n$2|sort -u
}
#}}}
#{{{ >>>   YESNO function

yesno() {
# Define options and corresponding commands
OPTIONS=("Yes" "No")
COMMANDS=("YESNO=0" "YESNO=1")
NUM_OPTIONS=${#OPTIONS[@]}

tput civis  # Hide cursor

# Function to display options horizontally
DISPLAY_OPTIONS() {
    tput setab 4; tput setaf 7
    echo -ne "\033[1G"  # Move cursor to beginning of the line
    for ((i=0; i<NUM_OPTIONS; i++)); do
        if [[ $i -eq $selected ]]; then
            echo -ne "\e[7m ${OPTIONS[i]} \e[27m "  # Highlight selected option
        else
            echo -n " ${OPTIONS[i]} "
        fi
    done
    tput sgr0
}
# Function to execute selected command
EXECUTE_COMMAND() {
   eval ${COMMANDS[selected]}
}

selected=0
DISPLAY_OPTIONS

# Main loop
while true; do
    read -s -n1 key
    case $key in
        D)  # Left arrow
            ((selected--))
            ;;
        C)  # Right arrow
            ((selected++))
            ;;
        "") # Enter key
            EXECUTE_COMMAND
            break
            ;;
    esac

    # Wrap selection around
    ((selected = (selected + NUM_OPTIONS) % NUM_OPTIONS))
    
    DISPLAY_OPTIONS
done

tput cnorm  # Restore cursor visibility
}

#}}}
#{{{ >>>   MISC
alias c='clear'
alias rca='source /home/batan/.bashrc.alieses'
alias rrc='source /home/batan/.bashrc'
alias cu='sudo apt autoremove --purge && sudo apt autoclean && sudo apt clean && youtube-dl --rm-cache-dir && sudo sweeper --automatic && sudo bleachbit --preset -c'
alias cuu='sudo apt autoremove --purge && sudo apt autoclean && sudo apt clean && sudo sweeper --automatic && yt-dlp --rm-cache-dir && sudo bleachbit --preset -c && sudo bash cache.sh && mkdir /home/batan/.cache/calendar.vim/ && cp /home/batan/dot/credentials.vim /home/batan/.cache/calendar.vim/credentials.vim'
alias p='echo "Ba7an?12982"| xclip -selection clipboard'
alias ipp='hostname -I && nmcli connection show && sudo ufw status'
alias mhs="sudo mv /etc/hosts /etc/hosts.bbak"
alias mhsb="sudo mv /etc/hosts.bbak /etc/hosts"

alias mega='surf https://mega.nz'
alias gut="xdotool type 'git clone https://github.com/batann/'"
alias warp="/opt/Warp/./Warp-x86_64.AppImage"
alias lc-install="nvim /media/batan/100/lc-install.sh"
alias lc-2-install="nvim /media/batan/100/lc-2-install.sh"




#}}}
#===================================================================================
#}}}


alias v='vim $(find . -maxdepth 1 -type f|fzf  -m --height 8)'
alias tmm="task $1 modify due:$(date +%Y-%m-%d)T23:30:00 priority:L"
alias lc-download-mp3="/usr/bin/yt-dlp_linux -x --audio-format mp3"
alias lc-own="sudo chown -R batan:batan"
alias laun='sudo -u batan bash /home/batan/.config/i3/launcher/launcher.sh'
lc-ghostty () {
read -p "term in ghostty manual:   >>>   " abc 
ghostty +show-config |grep $abc|awk -F '=' '{printf "%-30s %-5s %-20s \n", $3," <---> ", $2}'
}
